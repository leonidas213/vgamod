// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---- //
// mono //
// ---- //

#define mono_wrap_target 2
#define mono_wrap 8

static const uint16_t mono_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0xa047, //  1: mov    y, osr                     
            //     .wrap_target
    0xb022, //  2: mov    x, y            side 0     
    0x23c1, //  3: wait   1 irq, 1               [3] 
    0x80a0, //  4: pull   block                      
    0x6401, //  5: out    pins, 1                [4] 
    0x6201, //  6: out    pins, 1                [2] 
    0x00e5, //  7: jmp    !osre, 5                   
    0x0044, //  8: jmp    x--, 4                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program mono_program = {
    .instructions = mono_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config mono_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + mono_wrap_target, offset + mono_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void mono_program_init(PIO pio, uint sm, uint offset, uint pin) {
    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = mono_program_get_default_config(offset);
    pio_gpio_init(pio, pin);
    // Map the state machine's SET and OUT pin group to three pins, the `pin`
    // parameter to this function is the lowest one. These groups overlap.
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_out_pins(&c, pin, 1);
    // Set clock division (Commented out, this one runs at full speed)
    // sm_config_set_clkdiv(&c, 5) ;
    // Set this pin's GPIO function (connect PIO to the pad)
    // Set the pin direction to output at the PIO (3 pins)
    //pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running (commented out, I'll start this in the C)
    // pio_sm_set_enabled(pio, sm, true);
}

#endif

